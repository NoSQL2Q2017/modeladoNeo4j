CREATE 
 (Gu: Alumno:Docente { apellido: "Crespi", nombre: "Gustavo", legajo: 1491696 } ),
 (H: Alumno:Docente { apellido: "Fernandes dos Santos", nombre: "Juan", legajo: 1491738  } ),
 (J: Alumno:Docente { apellido: "Rios", nombre: "Juan", legajo: 1493346 } ),
 (G: Alumno:Docente { apellido: "Santoalla", nombre: "Gaston", legajo: 1493243 } ),
 (R: Alumno { apellido: "Vazquez", nombre: "Ramiro", legajo: 1491611 } );

CREATE
 (AED:  Materia { nombre: "Algoritmos y Estructura de Datos", electiva: false } } ),
 (DDS:  Materia { nombre: "Diseño de Sistemas", electiva: false } } ),
 (GDD:  Materia { nombre: "Gestion de Datos", electiva: false } } ),
 (CRIP:  Materia { nombre: "Criptografia", electiva: true } } ),
 (PDEP: Materia { nombre: "Paradigmas de Programacion", electiva: false } } ),
 (AG:   Materia { nombre: "Administracion Gerencial", electiva: false } } ),
 (SO:   Materia { nombre: "Sistemas Operativos", electiva: false } } ),
 (TADP: Materia { nombre: "Tecnicas Avanzadas de Programacion", electiva: true } );
 
MATCH (Gus:  Alumno { apellido: "Crespi"}),    (d: Materia { nombre: "Diseño de Sistemas"} ),
      (Juan: Alumno { apellido: "Rios"}),      (tadp: Materia { nombre: "Tecnicas Avanzadas de Programacion"} ),
      (Gas:  Alumno { apellido: "Santoalla"}), (crip: Materia { nombre: "Criptografia" } ),
      (R:    Alumno { apellido: "Vazquez"}),   (pdep: Materia { nombre: "Paradigmas de Programacion"} ),
      (gdd: Materia { nombre: "Gestion de Datos"} ), (ag: Materia { nombre: "Administracion Gerencial"} ),
      (Jfds: Alumno { apellido: "Fernandes dos Santos"}), (so: Materia { nombre: "Sistemas Operativos"} ),
      (aed: Materia { nombre: "Algoritmos y Estructura de Datos"} ),
CREATE 
 (Gus)-[:Conoce ]->(Juan), (Gus)-[:Conoce ]->(Gas), (Gus)-[:Conoce ]->(R), (Gus)-[:Conoce ]->(Jfds), 
 (Juan)-[:Conoce ]->(Gas), (Juan)-[:Conoce ]->(R), (Juan)-[:Conoce ]->(Jfds), 
 (Gas)-[:Conoce ]->(R), (Gas)-[:Conoce ]->(Jfds), 
 (R)-[:Conoce ]->(Jfds),
 (Juan)-[:Dicto ]->(pdep), (Juan)-[:Dicto ]->(dds),
 (Gus)-[:Dicto ]->(pdep), (Juan)-[:Dicto ]->(dds),
 (Jfds)-[:Dicto ]->(pdep), (Juan)-[:Dicto ]->(tadp),
 (Gas)-[:Dicto ]->(pdep), (Juan)-[:Dicto ]->(aed),
 (Gas)-[:FormoGrupoCon { materia: "Paradigmas de Programacion" } ]->(Jfds), 
 (Gas)-[:FormoGrupoCon { materia: "Paradigmas de Programacion" } ]->(Juan),
 (Juan)-[:FormoGrupoCon { materia: "Paradigmas de Programacion" } ]->(Jfds),
 (Gas)-[:FormoGrupoCon { materia: "Criptografia" } ]->(Jfds),
 (Gas)-[:FormoGrupoCon { materia: "Criptografia" } ]->(Juan),
 (Juan)-[:FormoGrupoCon { materia: "Criptografia" } ]->(Jfds),
 (Gas)-[:FormoGrupoCon { materia: "Tecnicas Avanzadas de Programacion" } ]->(Jfds),
 (Gas)-[:FormoGrupoCon { materia: "Tecnicas Avanzadas de Programacion" } ]->(Gus),
 (Gus)-[:FormoGrupoCon { materia: "Tecnicas Avanzadas de Programacion" } ]->(Jfds),
 (R)-[:FormoGrupoCon { materia: "Tecnicas Avanzadas de Programacion" } ]->(Juan),
 (R)-[:FormoGrupoCon { materia: "Sistemas Operativos" } ]->(Juan),
 (R)-[:FormoGrupoCon { materia: "Sistemas Operativos" } ]->(Jfds),
 (Jfds)-[:FormoGrupoCon { materia: "Sistemas Operativos" } ]->(Juan),
 (Gas)-[:FormoGrupoCon { materia: "Gestion de Datos" } ]->(Jfds),
 (Gas)-[:FormoGrupoCon { materia: "Gestion de Datos" } ]->(Juan),
 (Gas)-[:FormoGrupoCon { materia: "Gestion de Datos" } ]->(R),
 (Juan)-[:FormoGrupoCon { materia: "Gestion de Datos" } ]->(Jfds),
 (Juan)-[:FormoGrupoCon { materia: "Gestion de Datos" } ]->(R),
 (R)-[:FormoGrupoCon { materia: "Gestion de Datos" } ]->(Jfds),
 (Gas)-[:FormoGrupoCon { materia: "Diseño de Sistemas" } ]->(Juan),
 (Gas)-[:FormoGrupoCon { materia: "Diseño de Sistemas" } ]->(Gus),
 (Gas)-[:FormoGrupoCon { materia: "Diseño de Sistemas" } ]->(R),
 (R)-[:FormoGrupoCon { materia: "Diseño de Sistemas" } ]->(Juan),
 (Gas)-[:FormoGrupoCon { materia: "Diseño de Sistemas" } ]->(Gus),
 (Gus)-[:FormoGrupoCon { materia: "Diseño de Sistemas" } ]->(Juan),
 
 //TODO Relacion Curso
 
 //Las relaciones como Conoce o FormoGrupoCon deberian ser birideccionales, como esto no se puede en Neo4J se las crea con una direccion arbitraria para luego querearlas como MATCH (a1)-[:CONOCE]-(a2)